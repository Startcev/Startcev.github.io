{"version":3,"sources":["test_component/Main.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","state","activePanel","activeStory","onStoryChange","bind","e","this","setState","currentTarget","dataset","story","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","then","result","r","status","console","log","id","onClick","tabbar","selected","data-story","text","label","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gXAkBaA,EAAb,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,YAAa,SACbC,YAAa,QAEjB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAPN,EADvB,0DAWkBC,GACVC,KAAKC,SAAS,CAACL,YAAaG,EAAEG,cAAcC,QAAQC,UAZ5D,oCAekBL,GACVC,KAAKC,SAAS,CAACN,YAAaI,EAAEG,cAAcC,QAAQC,UAhB5D,0CAyCQC,MAFY,yBAED,CACPC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACL,eAAgB,mBAChB,OAAU,+BAEdC,SAAU,SACVC,eAAgB,cAChBC,KAAMC,KAAKC,UA/BF,CACT,KAAQ,GACR,MAAS,CACL,cAAiB,CACb,OAAU,eACV,OAAU,CACN,UAAa,2JACb,SAAY,YACZ,aAAgB,iCAChB,SAAY,mBACZ,WAAc,iBACd,SAAY,UACZ,gBAAmB,YAoBhCC,MAAK,SAACC,GACL,IAAMC,EAAID,EAAOE,OACbC,QAAQC,IAAI,aAAeH,QAvD3C,+BA4Dc,IAAD,OACL,OACI,kBAAC,IAAD,CAAMvB,YAAaK,KAAKN,MAAMC,aAC1B,kBAAC,IAAD,CAAO2B,GAAG,UACN,kBAAC,IAAD,gBACA,kBAAC,IAAD,KACI,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAYC,QAAS,kBAAM,EAAKtB,SAAS,CAACN,YAAa,aAAvD,mBAKR,kBAAC,IAAD,CAAO2B,GAAG,UACN,kBAAC,IAAD,CAAM1B,YAAaI,KAAKN,MAAME,YAAa4B,OACvC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACID,QAASvB,KAAKH,cACd4B,SAAqC,SAA3BzB,KAAKN,MAAME,YACrB8B,aAAW,OACXC,KAAK,8CACR,kBAAC,IAAD,OACD,kBAAC,IAAD,CACIJ,QAASvB,KAAKH,cACd4B,SAAqC,aAA3BzB,KAAKN,MAAME,YACrB8B,aAAW,WACXC,KAAK,8CACR,kBAAC,IAAD,OACD,kBAAC,IAAD,CACIJ,QAASvB,KAAKH,cACd4B,SAAqC,aAA3BzB,KAAKN,MAAME,YACrB8B,aAAW,WACXE,MAAM,KACND,KAAK,0DACR,kBAAC,IAAD,OACD,kBAAC,IAAD,CACIJ,QAASvB,KAAKH,cACd4B,SAAqC,YAA3BzB,KAAKN,MAAME,YACrB8B,aAAW,UACXC,KAAK,8CACR,kBAAC,IAAD,SAGL,kBAAC,IAAD,CAAML,GAAG,OAAO3B,YAAY,QACxB,kBAAC,IAAD,CAAO2B,GAAG,QACN,kBAAC,IAAD,qDAGR,kBAAC,IAAD,CAAMA,GAAG,WAAW3B,YAAY,YAC5B,kBAAC,IAAD,CAAO2B,GAAG,YACN,kBAAC,IAAD,qDAGR,kBAAC,IAAD,CAAMA,GAAG,WAAW3B,YAAY,YAC5B,kBAAC,IAAD,CAAO2B,GAAG,YACN,kBAAC,IAAD,iEAGR,kBAAC,IAAD,CAAMA,GAAG,UAAU3B,YAAY,WAC3B,kBAAC,IAAD,CAAO2B,GAAG,WACN,kBAAC,IAAD,4DAvHhC,GAA0BO,IAAMC,WCPjBC,MANf,WACI,OACI,kBAAC,EAAD,OCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.0c6fe648.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport {\r\n    View,\r\n    Panel,\r\n    PanelHeader,\r\n    Epic,\r\n    Tabbar,\r\n    TabbarItem,\r\n    CellButton,\r\n    Group,\r\n    ScreenSpinner\r\n} from '@vkontakte/vkui';\r\nimport Icon28NewsfeedOutline from '@vkontakte/icons/dist/28/newsfeed';\r\nimport Icon28ServicesOutline from '@vkontakte/icons/dist/28/services_outline';\r\nimport Icon28MessageOutline from '@vkontakte/icons/dist/28/message';\r\nimport Icon28UserCircleOutline from '@vkontakte/icons/dist/28/user_circle_outline';\r\n\r\nexport class Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activePanel: 'panel1',\r\n            activeStory: 'feed'\r\n        };\r\n        this.onStoryChange = this.onStoryChange.bind(this);\r\n    }\r\n\r\n    onStoryChange(e) {\r\n        this.setState({activeStory: e.currentTarget.dataset.story})\r\n    }\r\n\r\n    onPanelChange(e) {\r\n        this.setState({activePanel: e.currentTarget.dataset.story})\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const data = {\r\n            \"data\": {},\r\n            \"query\": {\r\n                \"request_token\": {\r\n                    \"method\": \"token/create\",\r\n                    \"params\": {\r\n                        \"pushToken\": \"dOZSI0vUPdA:APA91bGlvs5t1Ze7kjn3YVV044oi6t65NXOy1D4aTTJXJ7wujs9OcVIqetrXPA-LIr3EsoCT21V8RRrrqL58q1XvtI2_AV4xa6UEoZFwWzullYcBRkt9jkgdFPmS-qCr8iUFFSb-t1FE\",\r\n                        \"clientId\": \"mobile2.0\",\r\n                        \"clientSecret\": \"XN3o6pSxYiSKvB11UF5*W7NZ4x|0JE\",\r\n                        \"deviceId\": \"3c2e2c83026c6933\",\r\n                        \"deviceName\": \"samsung a10ser\",\r\n                        \"platform\": \"android\",\r\n                        \"platformVersion\": \"10\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const url = 'https://str.st/webapi/'\r\n\r\n        fetch(url, {\r\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, *cors, same-origin\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, *same-origin, omit\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Origin': 'https://startcev.github.io/'\r\n            },\r\n            redirect: 'follow', // manual, *follow, error\r\n            referrerPolicy: 'no-referrer', // no-referrer, *client\r\n            body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n        }).then((result) => {\r\n            const r = result.status\r\n                console.log(\"TIMBER -> \" + r)\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <View activePanel={this.state.activePanel}>\r\n                <Panel id=\"panel1\">\r\n                    <PanelHeader>Panel 1</PanelHeader>\r\n                    <Group>\r\n                        <ScreenSpinner />\r\n                        <CellButton onClick={() => this.setState({activePanel: 'panel2'})}>\r\n                            Go to panel 2\r\n                        </CellButton>\r\n                    </Group>\r\n                </Panel>\r\n                <Panel id='panel2'>\r\n                    <Epic activeStory={this.state.activeStory} tabbar={\r\n                        <Tabbar>\r\n                            <TabbarItem\r\n                                onClick={this.onStoryChange}\r\n                                selected={this.state.activeStory === 'feed'}\r\n                                data-story=\"feed\"\r\n                                text=\"Новости\"\r\n                            ><Icon28NewsfeedOutline/></TabbarItem>\r\n                            <TabbarItem\r\n                                onClick={this.onStoryChange}\r\n                                selected={this.state.activeStory === 'services'}\r\n                                data-story=\"services\"\r\n                                text=\"Сервисы\"\r\n                            ><Icon28ServicesOutline/></TabbarItem>\r\n                            <TabbarItem\r\n                                onClick={this.onStoryChange}\r\n                                selected={this.state.activeStory === 'messages'}\r\n                                data-story=\"messages\"\r\n                                label=\"12\"\r\n                                text=\"Сообщения\"\r\n                            ><Icon28MessageOutline/></TabbarItem>\r\n                            <TabbarItem\r\n                                onClick={this.onStoryChange}\r\n                                selected={this.state.activeStory === 'profile'}\r\n                                data-story=\"profile\"\r\n                                text=\"Профиль\"\r\n                            ><Icon28UserCircleOutline/></TabbarItem>\r\n                        </Tabbar>\r\n                    }>\r\n                        <View id=\"feed\" activePanel=\"feed\">\r\n                            <Panel id=\"feed\">\r\n                                <PanelHeader>Новости</PanelHeader>\r\n                            </Panel>\r\n                        </View>\r\n                        <View id=\"services\" activePanel=\"services\">\r\n                            <Panel id=\"services\">\r\n                                <PanelHeader>Сервисы</PanelHeader>\r\n                            </Panel>\r\n                        </View>\r\n                        <View id=\"messages\" activePanel=\"messages\">\r\n                            <Panel id=\"messages\">\r\n                                <PanelHeader>Сообщения</PanelHeader>\r\n                            </Panel>\r\n                        </View>\r\n                        <View id=\"profile\" activePanel=\"profile\">\r\n                            <Panel id=\"profile\">\r\n                                <PanelHeader>Профиль</PanelHeader>\r\n                            </Panel>\r\n                        </View>\r\n                    </Epic>\r\n                </Panel>\r\n            </View>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport {Main} from \"./test_component/Main\";\n\nfunction App() {\n    return (\n        <Main />\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
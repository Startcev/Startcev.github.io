{"version":3,"sources":["test_class/Example.js","App.js","serviceWorker.js","index.js"],"names":["Example","props","state","activeStory","onStoryChange","bind","e","this","setState","currentTarget","dataset","story","tabbar","onClick","selected","data-story","text","label","id","activePanel","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iWASaA,EAAb,kDACI,WAAaC,GAAQ,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CACTC,YAAa,WAEjB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBANL,EADxB,0DAUmBC,GACXC,KAAKC,SAAS,CAAEL,YAAaG,EAAEG,cAAcC,QAAQC,UAX7D,4EAoBQ,OACI,kBAAC,IAAD,CAAMR,YAAaI,KAAKL,MAAMC,YAAaS,OACvC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,QAASN,KAAKH,cACdU,SAAqC,SAA3BP,KAAKL,MAAMC,YACrBY,aAAW,OACXC,KAAK,8CACR,kBAAC,IAAD,OACD,kBAAC,IAAD,CACIH,QAASN,KAAKH,cACdU,SAAqC,aAA3BP,KAAKL,MAAMC,YACrBY,aAAW,WACXC,KAAK,8CACR,kBAAC,IAAD,OACD,kBAAC,IAAD,CACIH,QAASN,KAAKH,cACdU,SAAqC,aAA3BP,KAAKL,MAAMC,YACrBY,aAAW,WACXE,MAAM,KACND,KAAK,0DACR,kBAAC,IAAD,OACD,kBAAC,IAAD,CACIH,QAASN,KAAKH,cACdU,SAAqC,UAA3BP,KAAKL,MAAMC,YACrBY,aAAW,QACXC,KAAK,kCACR,kBAAC,IAAD,OACD,kBAAC,IAAD,CACIH,QAASN,KAAKH,cACdU,SAAqC,YAA3BP,KAAKL,MAAMC,YACrBY,aAAW,UACXC,KAAK,8CACR,kBAAC,IAAD,SAGL,kBAAC,IAAD,CAAME,GAAG,OAAOC,YAAY,QACxB,kBAAC,IAAD,CAAOD,GAAG,QACN,kBAAC,IAAD,qDAGR,kBAAC,IAAD,CAAMA,GAAG,WAAWC,YAAY,YAC5B,kBAAC,IAAD,CAAOD,GAAG,YACN,kBAAC,IAAD,qDAGR,kBAAC,IAAD,CAAMA,GAAG,WAAWC,YAAY,YAC5B,kBAAC,IAAD,CAAOD,GAAG,YACN,kBAAC,IAAD,iEAGR,kBAAC,IAAD,CAAMA,GAAG,QAAQC,YAAY,SACzB,kBAAC,IAAD,CAAOD,GAAG,SACN,kBAAC,IAAD,yCAGR,kBAAC,IAAD,CAAMA,GAAG,UAAUC,YAAY,WAC3B,kBAAC,IAAD,CAAOD,GAAG,WACN,kBAAC,IAAD,0DA9ExB,GAA6BE,IAAMC,WCCpBC,MANf,WACI,OACI,kBAAC,EAAD,OCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d1210183.chunk.js","sourcesContent":["import React from 'react';\r\nimport { View, Panel, PanelHeader, Epic, Tabbar, TabbarItem } from '@vkontakte/vkui';\r\nimport Icon28HomeOutline from '@vkontakte/icons/dist/28/home_outline';\r\nimport Icon28ServicesOutline from '@vkontakte/icons/dist/28/services_outline';\r\nimport Icon28MessageOutline from '@vkontakte/icons/dist/28/message_outline';\r\nimport Icon28ClipOutline from '@vkontakte/icons/dist/28/clip_outline';\r\nimport Icon28UserCircleOutline from '@vkontakte/icons/dist/28/user_circle_outline';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\n\r\nexport class Example extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeStory: 'profile'\r\n        };\r\n        this.onStoryChange = this.onStoryChange.bind(this);\r\n    }\r\n\r\n    onStoryChange (e) {\r\n        this.setState({ activeStory: e.currentTarget.dataset.story })\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render () {\r\n\r\n        return (\r\n            <Epic activeStory={this.state.activeStory} tabbar={\r\n                <Tabbar>\r\n                    <TabbarItem\r\n                        onClick={this.onStoryChange}\r\n                        selected={this.state.activeStory === 'main'}\r\n                        data-story=\"main\"\r\n                        text=\"Главная\"\r\n                    ><Icon28HomeOutline /></TabbarItem>\r\n                    <TabbarItem\r\n                        onClick={this.onStoryChange}\r\n                        selected={this.state.activeStory === 'services'}\r\n                        data-story=\"services\"\r\n                        text=\"Сервисы\"\r\n                    ><Icon28ServicesOutline/></TabbarItem>\r\n                    <TabbarItem\r\n                        onClick={this.onStoryChange}\r\n                        selected={this.state.activeStory === 'messages'}\r\n                        data-story=\"messages\"\r\n                        label=\"12\"\r\n                        text=\"Сообщения\"\r\n                    ><Icon28MessageOutline /></TabbarItem>\r\n                    <TabbarItem\r\n                        onClick={this.onStoryChange}\r\n                        selected={this.state.activeStory === 'clips'}\r\n                        data-story=\"clips\"\r\n                        text=\"Клипы\"\r\n                    ><Icon28ClipOutline /></TabbarItem>\r\n                    <TabbarItem\r\n                        onClick={this.onStoryChange}\r\n                        selected={this.state.activeStory === 'profile'}\r\n                        data-story=\"profile\"\r\n                        text=\"Профиль\"\r\n                    ><Icon28UserCircleOutline /></TabbarItem>\r\n                </Tabbar>\r\n            }>\r\n                <View id=\"main\" activePanel=\"main\">\r\n                    <Panel id=\"main\">\r\n                        <PanelHeader>Главная</PanelHeader>\r\n                    </Panel>\r\n                </View>\r\n                <View id=\"services\" activePanel=\"services\">\r\n                    <Panel id=\"services\">\r\n                        <PanelHeader>Сервисы</PanelHeader>\r\n                    </Panel>\r\n                </View>\r\n                <View id=\"messages\" activePanel=\"messages\">\r\n                    <Panel id=\"messages\">\r\n                        <PanelHeader>Сообщения</PanelHeader>\r\n                    </Panel>\r\n                </View>\r\n                <View id=\"clips\" activePanel=\"clips\">\r\n                    <Panel id=\"clips\">\r\n                        <PanelHeader>Клипы</PanelHeader>\r\n                    </Panel>\r\n                </View>\r\n                <View id=\"profile\" activePanel=\"profile\">\r\n                    <Panel id=\"profile\">\r\n                        <PanelHeader>Профиль</PanelHeader>\r\n                    </Panel>\r\n                </View>\r\n            </Epic>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport {Example} from './test_class/Example';\n\nfunction App() {\n    return (\n        <Example/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
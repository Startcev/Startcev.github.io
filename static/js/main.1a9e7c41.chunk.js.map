{"version":3,"sources":["test_component/TestPanel.js","test_component/NotFound.js","test_component/Main.js","App.js","serviceWorker.js","index.js"],"names":["TestPanel","props","state","activePanel","path","component","Two","to","from","React","Component","align","NotFound","src","Main","exact","Firs","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qQAGaA,EAAb,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,YAAa,UAJF,EADvB,qDAUQ,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAUC,GAAG,IAAIC,KAAK,oBAbtC,GAA+BC,IAAMC,WAmB/BJ,E,uKAEE,OACI,yBAAKK,MAAM,UACP,2FACA,yBAAKA,MAAM,QACP,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMJ,GAAG,KAAT,iB,GATdE,IAAMC,WCnBXE,EAAb,uKAGQ,OACI,yBAAKD,MAAM,UACP,+FACA,yBAAKE,IAAI,uFACT,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMN,GAAG,KAAT,2EAV5B,GAA8BE,IAAMC,WCGvBI,EAAb,kDACI,WAAYb,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,YAAa,UAJF,EADvB,qDAUQ,OACI,kBAAC,IAAD,KACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOY,OAAK,EAACX,KAAK,IAAIC,UAAWW,IACjC,kBAAC,IAAD,CAAOZ,KAAK,QAAQC,UAAWL,IAC/B,kBAAC,IAAD,CAAOK,UAAWO,WAhB1C,GAA0BH,IAAMC,WAwB1BM,E,uKAEE,OACI,yBAAKL,MAAM,UACP,iFACA,yBAAKA,MAAM,QACP,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMJ,GAAG,SAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,UAAT,qB,GAZbE,IAAMC,WCpBVO,MANf,WACI,OACI,kBAAC,EAAD,OCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1a9e7c41.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Link, Redirect, Route, Switch} from \"react-router-dom\";\r\n\r\nexport class TestPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activePanel: 'panel1'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/test/\" component={Two}/>\r\n                <Redirect to='/' from='/test/main'/>\r\n            </Switch>\r\n        )\r\n    }\r\n}\r\n\r\nclass Two extends React.Component {\r\n    render() {\r\n        return (\r\n            <div align='center'>\r\n                <h2>Ой, а я здесь.</h2>\r\n                <div align='left'>\r\n                    <nav>\r\n                        <ul>\r\n                            <li>\r\n                                <Link to=\"/\">Main</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport class NotFound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div align='center'>\r\n                <h2>Вы кто такие?</h2>\r\n                <img src=\"https://image.freepik.com/free-vector/error-404-not-found-glitch-effect_8024-4.jpg\"/>\r\n                <nav>\r\n                    <ul>\r\n                        <li>\r\n                            <Link to=\"/\">Понял, ухожу.</Link>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\r\nimport {TestPanel} from \"./TestPanel\";\r\nimport {NotFound} from \"./NotFound\";\r\n\r\nexport class Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activePanel: 'panel1'\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <div>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={Firs}/>\r\n                        <Route path=\"/test\" component={TestPanel}/>\r\n                        <Route component={NotFound}/>\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nclass Firs extends React.Component {\r\n    render() {\r\n        return (\r\n            <div align='center'>\r\n                <h2>Ну привет</h2>\r\n                <div align='left'>\r\n                    <nav>\r\n                        <ul>\r\n                            <li>\r\n                                <Link to=\"/test\">Test</Link>\r\n                            </li>\r\n                            <li>\r\n                                <Link to=\"/about\">NotFound</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport {Main} from \"./test_component/Main\";\n\nfunction App() {\n    return (\n        <Main/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}